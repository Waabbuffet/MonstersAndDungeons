package com.waabbuffet.MonstersAndDungeons.entity.automatons;

import com.waabbuffet.MonstersAndDungeons.entity.MaDEntityMonsterBase;
import com.waabbuffet.MonstersAndDungeons.entity.AI.EntityAIRookAttack;
import com.waabbuffet.MonstersAndDungeons.packet.MaDPacketHandler;
import com.waabbuffet.MonstersAndDungeons.packet.UpdateClientEntityAnimation;

import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityAgeable;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAIAttackMelee;
import net.minecraft.entity.ai.EntityAIAvoidEntity;
import net.minecraft.entity.ai.EntityAIFleeSun;
import net.minecraft.entity.ai.EntityAIHurtByTarget;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveTowardsTarget;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIRestrictSun;
import net.minecraft.entity.ai.EntityAISwimming;
import net.minecraft.entity.ai.EntityAIWander;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.ai.EntityAIZombieAttack;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.passive.EntityWolf;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.DamageSource;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.network.NetworkRegistry.TargetPoint;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class EntityAutomatonsRook extends MaDEntityMonsterBase {


	@SideOnly(Side.CLIENT)
	int animationCycle, TickCount = 0;
	public boolean SlamAttack, PunchMode;


	public EntityAutomatonsRook(World worldIn) {
		super(worldIn);
		this.setSize(1.4f, 3.7f);
		this.setHealth(500);
		//this.tasks.addTask(0, new EntityAISwimming(this));
		
		this.tasks.addTask(2, new EntityAIRookAttack(this, 0.3D, true));
		this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true));
	
	}
	@Override
	public boolean attackEntityAsMob(Entity entityIn) {
		// TODO Auto-generated method stub
	
		return true;
	}

	@Override
	protected void applyEntityAttributes()
	{
		super.applyEntityAttributes();
		this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(500D);
		this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(5D);
		this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3);
		this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(35.0D);
		this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(3.0D);
		this.getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(2.0D);

	}

	public int getAnimationCycle() {
		return animationCycle;
	}

	public void setAnimationCycle(int number)
	{
		this.animationCycle = number;
	}

	/**
	 * @param animationID - 0 = slam, 1 = punch, 2 = half hp animation, 3 = death animation
	 */
	public void acivateAnimationby(int animationID)
	{
		switch(animationID)
		{
		case 0:
			this.setSlamAttack(true);
			break;
		case 1:
			this.setPunchMode(true);
			break;
		case 2:
			break;
		}
	}
	public void setSlamAttack(boolean slamAttack) {
		SlamAttack = slamAttack;
	}

	public void setPunchMode(boolean punchMode) {
		PunchMode = punchMode;
	}
	/**
	 * @param animationID - 0 = slam, 1 = punch, 2 = half hp animation, 3 = death animation
	 */
	public void startAnimation(int animation)
	{
		if(!worldObj.isRemote)
		{	

			MaDPacketHandler.INSTANCE.sendToAll(new UpdateClientEntityAnimation(this, animation));
		}
	}

	@Override
	public void onUpdate() {
		super.onUpdate();
		
		if(this.SlamAttack)
		{
			if(TickCount == 0)
			{
				TickCount = 1;
				if(animationCycle < 22)
					animationCycle ++;
				else
				{
					animationCycle = 0;
					this.SlamAttack = false;
				}
			}else
			{
				TickCount --;
			}
		}

		if(this.PunchMode)
		{
			if(TickCount == 0)
			{
				TickCount = 1;
				if(animationCycle < 24)
					animationCycle ++;
				else
				{
					animationCycle = 0;
					this.PunchMode = false;
				}
			}else
			{
				TickCount --;
			}
		}

		
	}


}
